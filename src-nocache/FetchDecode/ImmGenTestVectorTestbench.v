/*
Module: 
    ImmGenTestVectorTestbench

Description:   
    Randomized vector testbench for the RISC-V Processor Immediate Generator

Input:
    immgentestvectors.input generated by ImmGenTestGen.py

Authors:
    Matthew Dharmawan and Reuben Koshy Thomas

 */

`timescale 1ns / 1ps

module ImmGenTestVectorTestbench();

    parameter Halfcycle = 5; //half period is 5ns

    localparam Cycle = 2*Halfcycle;

    reg Clock;

    // Clock Signal generation:
    initial Clock = 0; 
    always #(Halfcycle) Clock = ~Clock;

    // Wires to test the ALU
    // These are read from the input vector
    reg [31:0] inst;
    //wire [3:0] ImmSel
    reg [6:0] opcode;
    wire [31:0] DUTout;
    reg [31:0] REFout;
    

    // Task for checking output
    task checkOutput;
        input [31:0] inst;
        //input [2:0] funct;
        input [31:0] REFout;
        input [6:0] opcode;
        if ( REFout !== DUTout ) begin
            $display("FAIL: Incorrect result for opcode %b, inst: %b, Python: %b, but ImmGen: %b ", opcode, inst, REFout, DUTout);
        $finish();
        end
        else begin
            $display("PASS:   Correct result for opcode %b, inst: %b, Python: %b, and ImmGen: %b ", opcode, inst, REFout, DUTout);
        end
    endtask


    // This is where the modules being tested are instantiated. 
    ImmGen DUT1(
        .inst(inst),
        .imm(DUTout)
    );

    /////////////////////////////////////////////////////////////////
    // Change this number to reflect the number of testcases in your
    // testvector input file, which you can find with the command:
    // % wc -l ../sim/tests/testvectors.input
    // //////////////////////////////////////////////////////////////
    localparam loops = 1000;
    localparam testcases = loops * 3;

    reg [63:0] testvector [0:testcases-1]; // Each testcase has 64 bits:


    integer i; // integer used for looping in non-generate statement

    initial 
    begin
        $vcdpluson;
        $readmemb("/home/cc/eecs151/fa22/class/eecs151-aal/fa22_asic_team10/tests/immgentestvectors.input", testvector);
        for (i = 0; i < testcases; i = i + 1) begin
            // opcode = testvector[i][106:100];
            // funct = testvector[i][99:97];
            // add_rshift_type = testvector[i][96];
            // A = testvector[i][95:64];
            // B = testvector[i][63:32];
            // REFout = testvector[i][31:0];
            
            opcode =    testvector[i][38:32];
            inst =      testvector[i][63:32];
            REFout =    testvector[i][31:0];
            #1;
            
            checkOutput(inst, REFout, opcode);
        end
        $display("\n\nALL TESTS PASSED!");
        $display("\n\nNumber of testcases ran: %d\n", testcases);
        $vcdplusoff;
        $finish();
    end

endmodule
